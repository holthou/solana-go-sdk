package stake

import (
	"encoding/hex"
	"fmt"
	"github.com/blocto/solana-go-sdk/common"
	"github.com/stretchr/testify/require"
	"reflect"
	"testing"
)

func TestStakeAccountDeserialize(t *testing.T) {
	type args struct {
		data []byte
	}
	tests := []struct {
		name    string
		args    args
		want    StakeAccount
		wantErr bool
	}{
		{
			args: args{
				data: []byte{2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 103, 238, 231, 196, 175, 28, 34, 131, 56, 208, 192, 42, 105, 20, 176, 69, 132, 88, 85, 161, 38, 63, 31, 220, 67, 245, 74, 232, 245, 24, 211, 176, 103, 238, 231, 196, 175, 28, 34, 131, 56, 208, 192, 42, 105, 20, 176, 69, 132, 88, 85, 161, 38, 63, 31, 220, 67, 245, 74, 232, 245, 24, 211, 176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 216, 160, 109, 228, 92, 205, 15, 226, 216, 62, 47, 96, 90, 92, 85, 91, 9, 159, 48, 226, 114, 252, 18, 28, 218, 115, 140, 151, 162, 49, 39, 44, 50, 172, 140, 157, 14, 0, 0, 89, 2, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 224, 126, 246, 6, 0, 0, 0, 0, 0, 0, 0, 0},
			},
			want: StakeAccount{
				Meta: Meta{
					RentExemptReserve: 2282880,
					Authorized: Authorized{
						Staker:     common.PublicKeyFromString("7ziHMYFe6st7b6AWnLSSqLoVqbZcXJPUxSDsTG4xzmoV"),
						Withdrawer: common.PublicKeyFromString("7ziHMYFe6st7b6AWnLSSqLoVqbZcXJPUxSDsTG4xzmoV"),
					},
					Lockup: Lockup{
						UnixTimestamp: 0,
						Epoch:         0,
						Cusodian:      common.PublicKeyFromString("11111111111111111111111111111111"),
					},
				},
				Stake: &Stake{
					Delegation: Delegation{
						Voter:              common.PublicKeyFromString("bXr9MyoUAaGusQZ4gaUPmSZByHAV7RRGr1FhCW5tFh8"),
						Stake:              16069832749612,
						ActivationEpoch:    601,
						DeactivationEpoch:  18446744073709551615,
						WarmupCooldownRate: 0.25,
					},
					creditsObserved: 116817632,
				},
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := StakeAccountDeserialize(tt.args.data)
			if (err != nil) != tt.wantErr {
				t.Errorf("NonceAccountDeserialize() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NonceAccountDeserialize() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestStakeAccountSelfTest(t *testing.T) {
	str := "0200000080d522000000000067eee7c4af1c228338d0c02a6914b045845855a1263f1fdc43f54ae8f518d3b067eee7c4af1c228338d0c02a6914b045845855a1263f1fdc43f54ae8f518d3b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008d8a06de45ccd0fe2d83e2f605a5c555b099f30e272fc121cda738c97a231272c32ac8c9d0e00005902000000000000ffffffffffffffff000000000000d03fe07ef6060000000000000000"
	data, err := hex.DecodeString(str)
	require.NoError(t, err)

	for i := range data {
		fmt.Printf("%d ,", data[i])
	}

	//info, err := StakeAccountDeserialize(data)
	//require.NoError(t, err)
	//
	//fmt.Printf("%+v \n", info)
	//fmt.Printf("%+v \n", *info.Stake)
}

func TestStakeAccountSelfTest2(t *testing.T) {
	str := "0200000055ad8212807e2f0271262f4cf45d09cdc531992e06dae4e29f32dfbdc283d9e4152d4110862730d05d48343b94ecdfd959c0fa0d7847285e0eb76f94188eac48071f00000000000000004a6ad90f000000001f000000004b6ad90f000000001e000000004c6ad90f000000001d000000004d6ad90f000000001c000000004e6ad90f000000001b000000004f6ad90f000000001a00000000506ad90f000000001900000000516ad90f000000001800000000526ad90f000000001700000000536ad90f000000001600000000546ad90f000000001500000000556ad90f000000001400000000566ad90f000000001300000000576ad90f000000001200000000586ad90f000000001100000000596ad90f0000000010000000005a6ad90f000000000f000000005b6ad90f000000000e000000005c6ad90f000000000d000000005d6ad90f000000000c000000005e6ad90f000000000b000000005f6ad90f000000000a00000000606ad90f000000000900000000646ad90f000000000800000000656ad90f000000000700000000666ad90f000000000600000000676ad90f000000000500000000686ad90f000000000400000000696ad90f0000000003000000006a6ad90f0000000002000000006b6ad90f000000000100000001496ad90f000000000100000000000000670200000000000055ad8212807e2f0271262f4cf45d09cdc531992e06dae4e29f32dfbdc283d9ef000000000000000140000000000000002802000000000000051f5e0300000000e27758030000000029020000000000000ab8630300000000051f5e03000000002a0200000000000047236903000000000ab86303000000002b020000000000009bc66e030000000047236903000000002c020000000000002f637403000000009bc66e03000000002d02000000000000fafe7903000000002f637403000000002e0200000000000065ea7f0300000000fafe7903000000002f0200000000000076d085030000000065ea7f0300000000300200000000000000ba8b030000000076d0850300000000310200000000000049a991030000000000ba8b0300000000320200000000000013cd97030000000049a991030000000033020000000000005af89d030000000013cd97030000000034020000000000006942a403000000005af89d03000000003502000000000000478aaa03000000006942a4030000000036020000000000009ae4b00300000000478aaa03000000003702000000000000091cb703000000009ae4b003000000003802000000000000cdf1bc0300000000091cb703000000003902000000000000842dc30300000000cdf1bc03000000003a02000000000000446cc90300000000842dc303000000003b0200000000000087c9cf0300000000446cc903000000003c020000000000009c0ed6030000000087c9cf03000000003d02000000000000fb61dc03000000009c0ed603000000003e02000000000000a185e20300000000fb61dc03000000003f0200000000000044d3e80300000000a185e2030000000040020000000000002424ef030000000044d3e8030000000041020000000000002325f503000000002424ef03000000004202000000000000d555fb03000000002325f50300000000430200000000000021a7010400000000d555fb03000000004402000000000000a3ec07040000000021a701040000000045020000000000005d390e0400000000a3ec070400000000460200000000000021f21304000000005d390e040000000047020000000000004a451a040000000021f21304000000004802000000000000df812004000000004a451a04000000004902000000000000ab99260400000000df812004000000004a0200000000000013962c0400000000ab992604000000004b02000000000000c97d32040000000013962c04000000004c020000000000005436380400000000c97d3204000000004d0200000000000050cf3d040000000054363804000000004e020000000000000fba43040000000050cf3d04000000004f02000000000000f3c84904000000000fba4304000000005002000000000000cc7d4f0400000000f3c84904000000005102000000000000d786550400000000cc7d4f040000000052020000000000006e745b0400000000d786550400000000530200000000000096626104000000006e745b04000000005402000000000000e765670400000000966261040000000055020000000000004c586d0400000000e765670400000000560200000000000065d97204000000004c586d04000000005702000000000000992378040000000065d9720400000000580200000000000068477d040000000099237804000000005902000000000000e2af82040000000068477d04000000005a02000000000000026c880400000000e2af8204000000005b02000000000000334d8e0400000000026c8804000000005c020000000000007b31940400000000334d8e04000000005d02000000000000e1069a04000000007b319404000000005e0200000000000027d59f0400000000e1069a04000000005f02000000000000aa5ba5040000000027d59f040000000060020000000000002fa6aa0400000000aa5ba5040000000061020000000000001d4db004000000002fa6aa04000000006202000000000000e028b604000000001d4db0040000000063020000000000008310bc0400000000e028b604000000006402000000000000b317c204000000008310bc040000000065020000000000009c13c80400000000b317c2040000000066020000000000009536ce04000000009c13c8040000000067020000000000000749d104000000009536ce04000000006b6ad90f000000000b8a446600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
	data, err := hex.DecodeString(str)
	require.NoError(t, err)

	//for i := range data {
	//	fmt.Printf("%d ,", data[i])
	//}

	info, err := VoteAccountDeserialize(data)
	require.NoError(t, err)

	fmt.Printf("%+v \n", info)
	//fmt.Printf("%+v \n", *info.Stake)
}
